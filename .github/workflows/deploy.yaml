name: Deploy CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_IMAGE: customer-churn-prediction
  DOCKER_REGISTRY: ghcr.io
  IMAGE_TAG: ${{ github.sha }}
  CONTAINER_NAME: customer-churn-prediction-container
  LOG_FILE: deploy.log
  PREVIOUS_IMAGE_TAG: ${{ github.sha }}-previous

jobs:
  data_ingestion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          echo "Installing dependencies..." >> $LOG_FILE
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        continue-on-error: false  # Critical: dependencies must be installed
        env:
          LOG_FILE: ${{ env.LOG_FILE }}

      - name: Download data
        env:
          DATA_URL: ${{ secrets.DATA_URL }}
        run: |
          echo "Downloading data from ${DATA_URL}..." >> $LOG_FILE
          wget -O ${GITHUB_WORKSPACE}/artifacts/data_ingestion/data.zip $DATA_URL
          unzip ${GITHUB_WORKSPACE}/artifacts/data_ingestion/data.zip -d ${GITHUB_WORKSPACE}/artifacts/data_ingestion/
        continue-on-error: true  # Non-critical: allow pipeline to proceed if data download fails, log error

  data_validation:
    runs-on: ubuntu-latest
    needs: data_ingestion
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          echo "Installing dependencies..." >> $LOG_FILE
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        continue-on-error: false  # Critical: dependencies must be installed

      - name: Validate data
        run: |
          echo "Validating data..." >> $LOG_FILE
          python validate_data.py
        continue-on-error: true  # Non-critical: allow pipeline to proceed if validation fails, log error

  data_transformation:
    runs-on: ubuntu-latest
    needs: data_validation
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          echo "Installing dependencies..." >> $LOG_FILE
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        continue-on-error: false  # Critical: dependencies must be installed

      - name: Transform data
        run: |
          echo "Transforming data..." >> $LOG_FILE
          python transform_data.py
        continue-on-error: true  # Non-critical: allow pipeline to proceed if transformation fails, log error

  model_training:
    runs-on: ubuntu-latest
    needs: data_transformation
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        continue-on-error: false  # Critical: ensure repo is checked out
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
        continue-on-error: false  # Critical: Python setup must succeed

      - name: Install dependencies
        run: |
          echo "Installing dependencies..." >> $LOG_FILE
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        continue-on-error: false  # Critical: dependencies must be installed for training

      - name: Generate test data for evaluation
        run: |
          echo "Generating test data..." >> $LOG_FILE
          python generate_test_data.py
        continue-on-error: true  # Non-critical: allow pipeline to proceed if test data generation fails, log error

      - name: Train model with dummy data
        run: |
          echo "Training model with dummy data..." >> $LOG_FILE
          python train_model.py --use_dummy --model_path models/model.pkl
        continue-on-error: true  # Critical but allow continuation for debugging; log failure

      - name: Verify model file
        run: |
          echo "Verifying model file..." >> $LOG_FILE
          ls -l models/model.pkl || echo "Model file not found" >> $LOG_FILE
          file models/model.pkl || echo "Cannot get file type" >> $LOG_FILE
          echo "Model file size: $(stat -f %z models/model.pkl 2>> $LOG_FILE || echo '0') bytes" >> $LOG_FILE
        continue-on-error: true  # Non-critical: verification can fail, but log for debugging

      - name: Upload model artifact
        uses: actions/upload-artifact@v4
        with:
          name: model
          path: models/model.pkl
        continue-on-error: true  # Allow continuation if upload fails, log for debugging

      - name: Upload test data artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-data
          path: |
            data/test_data.csv
            data/test_labels.csv
        continue-on-error: true  # Allow continuation if upload fails, log for debugging

  model_evaluation:
    runs-on: ubuntu-latest
    needs: model_training
    continue-on-error: true  # Allow pipeline to proceed even if evaluation fails, log errors
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        continue-on-error: false  # Critical: ensure repo is checked out
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
        continue-on-error: false  # Critical: Python setup must succeed

      - name: Install dependencies
        run: |
          echo "Installing dependencies..." >> $LOG_FILE
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        continue-on-error: false  # Critical: dependencies must be installed for evaluation

      - name: Download model artifact
        uses: actions/download-artifact@v3
        with:
          name: model
          path: models/
        continue-on-error: true  # Allow continuation if download fails, log for debugging

      - name: Download test data artifacts
        uses: actions/download-artifact@v3
        with:
          name: test-data
          path: data/
        continue-on-error: true  # Allow continuation if download fails, log for debugging

      - name: Verify downloaded files
        run: |
          echo "Verifying downloaded files..." >> $LOG_FILE
          ls -l models/model.pkl || echo "Model file not found" >> $LOG_FILE
          file models/model.pkl || echo "Cannot get file type" >> $LOG_FILE
          echo "Model file size: $(stat -f %z models/model.pkl 2>> $LOG_FILE || echo '0') bytes" >> $LOG_FILE
          ls -l data/test_data.csv data/test_labels.csv || echo "Test data files not found" >> $LOG_FILE
        continue-on-error: true  # Non-critical: verification can fail, but log for debugging

      - name: Evaluate model
        run: |
          echo "Evaluating model..." >> $LOG_FILE
          python scripts/evaluate_model.py
        continue-on-error: true  # Non-critical: allow pipeline to proceed if evaluation fails, log error

  deploy:
    runs-on: ubuntu-latest
    needs: model_evaluation
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        continue-on-error: false  # Critical: ensure repo is checked out

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
        continue-on-error: false  # Critical: Python setup must succeed

      - name: Install dependencies
        run: |
          echo "Installing dependencies..." >> $LOG_FILE
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        continue-on-error: false  # Critical: dependencies must be installed for deployment

      - name: Download model artifact
        uses: actions/download-artifact@v3
        with:
          name: model
          path: models/
        continue-on-error: true  # Allow continuation if download fails, log for debugging

      - name: Build Docker image
        run: |
          echo "Building Docker image..." >> $LOG_FILE
          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }} . 2>> $LOG_FILE || echo "Error building Docker image!" >> $LOG_FILE
        continue-on-error: true  # Allow continuation if build fails, log for debugging

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: false  # Critical: login must succeed for push

      - name: Push Docker image to GitHub Container Registry
        run: |
          echo "Pushing Docker image to registry..." >> $LOG_FILE
          docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }} 2>> $LOG_FILE || echo "Error pushing Docker image!" >> $LOG_FILE
        continue-on-error: true  # Allow continuation if push fails, log for debugging

      - name: Record current deployment
        if: success()
        run: |
          echo ${{ env.IMAGE_TAG }} > current_deployment.txt
          cat current_deployment.txt >> $LOG_FILE
        continue-on-error: true  # Non-critical: logging deployment, allow continuation if fails

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            echo "Logging deployment process..." > /tmp/${{ env.LOG_FILE }}
            echo "Stopping old container..." >> /tmp/${{ env.LOG_FILE }}
            docker stop ${{ env.CONTAINER_NAME }} || true
            echo "Removing old container..." >> /tmp/${{ env.LOG_FILE }}
            docker rm ${{ env.CONTAINER_NAME }} || true
            echo "Pulling new image..." >> /tmp/${{ env.LOG_FILE }}
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
            
            echo "Running health check on new image..." >> /tmp/${{ env.LOG_FILE }}
            if docker run --rm ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }} python -c "import sys; sys.exit(0 if 'Healthy' in open('/app/health.txt').read() else 1)"; then
              echo "Health check passed. Starting new container..." >> /tmp/${{ env.LOG_FILE }}
              docker run -d --name ${{ env.CONTAINER_NAME }} -p 80:80 ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
              echo "Deployment successful." >> /tmp/${{ env.LOG_FILE }}
            else
              echo "Health check failed. Initiating rollback..." >> /tmp/${{ env.LOG_FILE }}
              if [ -f current_deployment.txt ]; then
                PREVIOUS_IMAGE_TAG=$(cat current_deployment.txt)
                echo "Rolling back to $PREVIOUS_IMAGE_TAG" >> /tmp/${{ env.LOG_FILE }}
                docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:$PREVIOUS_IMAGE_TAG
                docker run -d --name ${{ env.CONTAINER_NAME }} -p 80:80 ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:$PREVIOUS_IMAGE_TAG
                echo "Rollback successful." >> /tmp/${{ env.LOG_FILE }}
              else
                echo "No previous deployment found. Manual intervention required." >> /tmp/${{ env.LOG_FILE }}
                exit 1
              fi
        continue-on-error: true  # Allow continuation if SSH deployment fails, log for debugging

      - name: Upload deployment log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-log
          path: ${{ env.LOG_FILE }}
        continue-on-error: true  # Allow continuation if upload fails, log for debugging

      - name: Notify Slack on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        with:
          status: ${{ job.status }}
          color: danger
          message: Deployment failed for ${{ github.repository }} on ${{ github.ref }} at ${{ github.sha }}. A rollback was attempted. Check logs for details.
        continue-on-error: true  # Allow pipeline to continue even if notification fails

      - name: Notify Slack on success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        with:
          status: ${{ job.status }}
          color: good
          message: Deployment successful for ${{ github.repository }} on ${{ github.ref }} at ${{ github.sha }}. Check logs for details.
        continue-on-error: true  # Allow pipeline to continue even if notification fails
